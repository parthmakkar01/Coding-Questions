/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    struct TreeNode * makeTree(vector<int> in , vector<int> pre ,int inS ,int inE , int preS , int preE )
{
	if(inS>inE)
		return NULL;	
	int rootData=pre[preS];
	int index=-1;
	
	for(int i=inS;i<=inE;i++)
	{
		if(in[i]==rootData)
		{
			index=i;
			break;		
		}	
	}
	
	
	int LinS=inS;
	int LinE=index-1;
	int LpreS=preS+1;
	int LpreE=(LinE-LinS)+LpreS;
	 
	int RinS=index+1;
	int RinE=inE;
	int RpreS=LpreE+1; 
	int RpreE=preE;
	
	struct TreeNode * roots=new TreeNode(rootData);
	roots->left= makeTree(in , pre , LinS , LinE , LpreS , LpreE);
	roots->right= makeTree(in , pre , RinS ,RinE , RpreS ,RpreE);
	return roots;
	
}
    
    
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder)     {
     
        int size=preorder.size();
        TreeNode * root1= makeTree(inorder , preorder , 0 ,size-1,0,size-1);
        return root1;
    }
};