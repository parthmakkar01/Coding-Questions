/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    ListNode* split(struct ListNode * t)
    {
        struct ListNode * s=t , *f=t , *prev;
        while(s && f && f->next)
        {
            prev=s;
            s=s->next;
            f=f->next->next;
        }
        
        if(prev)
        {
            prev->next=NULL;
        }
        
        return s;
    }
    
    ListNode * merge(ListNode * p , ListNode * q)
    {
        if(p==NULL)
                return q;
        if(q==NULL)
                return p;
        struct ListNode * res=NULL;
        if(p->val<=q->val)
        {
            res=p;
            res->next=merge(p->next , q);
        }
        else
        {
            res=q;
            res->next=merge(p,q->next);
        }
        return res;
    }
    
    ListNode* sortList(ListNode* head) {
        
        if(head==NULL || head->next==NULL)
        {
            return head;
        }

        
        struct ListNode * p=head;
        struct ListNode * q=split(head);
        
        struct ListNode * n = merge( sortList(p) ,sortList(q));
        return n;
    }
};